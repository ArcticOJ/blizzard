// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.32
// source: blizzard.proto

package blizzard

import (
	context "context"
	errors "errors"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_blizzard_proto struct{}

func (drpcEncoding_File_blizzard_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_blizzard_proto) MarshalAppend(buf []byte, msg drpc.Message) ([]byte, error) {
	return proto.MarshalOptions{}.MarshalAppend(buf, msg.(proto.Message))
}

func (drpcEncoding_File_blizzard_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_blizzard_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return protojson.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_blizzard_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return protojson.Unmarshal(buf, msg.(proto.Message))
}

type DRPCBlizzardClient interface {
	DRPCConn() drpc.Conn

	FetchTestCases(ctx context.Context) (DRPCBlizzard_FetchTestCasesClient, error)
	Alive(ctx context.Context, in *emptypb.Empty) (*wrapperspb.BoolValue, error)
}

type drpcBlizzardClient struct {
	cc drpc.Conn
}

func NewDRPCBlizzardClient(cc drpc.Conn) DRPCBlizzardClient {
	return &drpcBlizzardClient{cc}
}

func (c *drpcBlizzardClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcBlizzardClient) FetchTestCases(ctx context.Context) (DRPCBlizzard_FetchTestCasesClient, error) {
	stream, err := c.cc.NewStream(ctx, "/blizzard.Blizzard/FetchTestCases", drpcEncoding_File_blizzard_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcBlizzard_FetchTestCasesClient{stream}
	return x, nil
}

type DRPCBlizzard_FetchTestCasesClient interface {
	drpc.Stream
	Send(*Case) error
	Recv() (*CaseData, error)
}

type drpcBlizzard_FetchTestCasesClient struct {
	drpc.Stream
}

func (x *drpcBlizzard_FetchTestCasesClient) Send(m *Case) error {
	return x.MsgSend(m, drpcEncoding_File_blizzard_proto{})
}

func (x *drpcBlizzard_FetchTestCasesClient) Recv() (*CaseData, error) {
	m := new(CaseData)
	if err := x.MsgRecv(m, drpcEncoding_File_blizzard_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcBlizzard_FetchTestCasesClient) RecvMsg(m *CaseData) error {
	return x.MsgRecv(m, drpcEncoding_File_blizzard_proto{})
}

func (c *drpcBlizzardClient) Alive(ctx context.Context, in *emptypb.Empty) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/blizzard.Blizzard/Alive", drpcEncoding_File_blizzard_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCBlizzardServer interface {
	FetchTestCases(DRPCBlizzard_FetchTestCasesStream) error
	Alive(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error)
}

type DRPCBlizzardUnimplementedServer struct{}

func (s *DRPCBlizzardUnimplementedServer) FetchTestCases(DRPCBlizzard_FetchTestCasesStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCBlizzardUnimplementedServer) Alive(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCBlizzardDescription struct{}

func (DRPCBlizzardDescription) NumMethods() int { return 2 }

func (DRPCBlizzardDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/blizzard.Blizzard/FetchTestCases", drpcEncoding_File_blizzard_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCBlizzardServer).
					FetchTestCases(
						&drpcBlizzard_FetchTestCasesStream{in1.(drpc.Stream)},
					)
			}, DRPCBlizzardServer.FetchTestCases, true
	case 1:
		return "/blizzard.Blizzard/Alive", drpcEncoding_File_blizzard_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCBlizzardServer).
					Alive(
						ctx,
						in1.(*emptypb.Empty),
					)
			}, DRPCBlizzardServer.Alive, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterBlizzard(mux drpc.Mux, impl DRPCBlizzardServer) error {
	return mux.Register(impl, DRPCBlizzardDescription{})
}

type DRPCBlizzard_FetchTestCasesStream interface {
	drpc.Stream
	Send(*CaseData) error
	Recv() (*Case, error)
}

type drpcBlizzard_FetchTestCasesStream struct {
	drpc.Stream
}

func (x *drpcBlizzard_FetchTestCasesStream) Send(m *CaseData) error {
	return x.MsgSend(m, drpcEncoding_File_blizzard_proto{})
}

func (x *drpcBlizzard_FetchTestCasesStream) Recv() (*Case, error) {
	m := new(Case)
	if err := x.MsgRecv(m, drpcEncoding_File_blizzard_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcBlizzard_FetchTestCasesStream) RecvMsg(m *Case) error {
	return x.MsgRecv(m, drpcEncoding_File_blizzard_proto{})
}

type DRPCBlizzard_AliveStream interface {
	drpc.Stream
	SendAndClose(*wrapperspb.BoolValue) error
}

type drpcBlizzard_AliveStream struct {
	drpc.Stream
}

func (x *drpcBlizzard_AliveStream) SendAndClose(m *wrapperspb.BoolValue) error {
	if err := x.MsgSend(m, drpcEncoding_File_blizzard_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
